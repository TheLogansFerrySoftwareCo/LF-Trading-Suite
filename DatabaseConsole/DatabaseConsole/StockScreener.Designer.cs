//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("StockScreenerModel", "FK_Stocks_Exchanges", "Exchanx", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LogansFerry.TradingSuite.DatabaseConsole.Exchanx), "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LogansFerry.TradingSuite.DatabaseConsole.Stock), true)]
[assembly: EdmRelationshipAttribute("StockScreenerModel", "WatchListsToTickers", "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LogansFerry.TradingSuite.DatabaseConsole.Stock), "Watchlist", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LogansFerry.TradingSuite.DatabaseConsole.Watchlist))]
[assembly: EdmRelationshipAttribute("StockScreenerModel", "FK_StockDailies_Stocks", "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LogansFerry.TradingSuite.DatabaseConsole.Stock), "StockDaily", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LogansFerry.TradingSuite.DatabaseConsole.StockDaily), true)]

#endregion

namespace LogansFerry.TradingSuite.DatabaseConsole
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class StockScreenerEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new StockScreenerEntities object using the connection string found in the 'StockScreenerEntities' section of the application configuration file.
        /// </summary>
        public StockScreenerEntities() : base("name=StockScreenerEntities", "StockScreenerEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new StockScreenerEntities object.
        /// </summary>
        public StockScreenerEntities(string connectionString) : base(connectionString, "StockScreenerEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new StockScreenerEntities object.
        /// </summary>
        public StockScreenerEntities(EntityConnection connection) : base(connection, "StockScreenerEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Exchanx> Exchanges
        {
            get
            {
                if ((_Exchanges == null))
                {
                    _Exchanges = base.CreateObjectSet<Exchanx>("Exchanges");
                }
                return _Exchanges;
            }
        }
        private ObjectSet<Exchanx> _Exchanges;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Stock> Stocks
        {
            get
            {
                if ((_Stocks == null))
                {
                    _Stocks = base.CreateObjectSet<Stock>("Stocks");
                }
                return _Stocks;
            }
        }
        private ObjectSet<Stock> _Stocks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Watchlist> Watchlists
        {
            get
            {
                if ((_Watchlists == null))
                {
                    _Watchlists = base.CreateObjectSet<Watchlist>("Watchlists");
                }
                return _Watchlists;
            }
        }
        private ObjectSet<Watchlist> _Watchlists;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StockDaily> StockDailies
        {
            get
            {
                if ((_StockDailies == null))
                {
                    _StockDailies = base.CreateObjectSet<StockDaily>("StockDailies");
                }
                return _StockDailies;
            }
        }
        private ObjectSet<StockDaily> _StockDailies;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Exchanges EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchanges(Exchanx exchanx)
        {
            base.AddObject("Exchanges", exchanx);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Stocks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStocks(Stock stock)
        {
            base.AddObject("Stocks", stock);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Watchlists EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWatchlists(Watchlist watchlist)
        {
            base.AddObject("Watchlists", watchlist);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StockDailies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStockDailies(StockDaily stockDaily)
        {
            base.AddObject("StockDailies", stockDaily);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockScreenerModel", Name="Exchanx")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Exchanx : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Exchanx object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Exchanx CreateExchanx(global::System.String id, global::System.String name)
        {
            Exchanx exchanx = new Exchanx();
            exchanx.ID = id;
            exchanx.Name = name;
            return exchanx;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.String _ID;
        partial void OnIDChanging(global::System.String value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockScreenerModel", "FK_Stocks_Exchanges", "Stock")]
        public EntityCollection<Stock> Stocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Stock>("StockScreenerModel.FK_Stocks_Exchanges", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Stock>("StockScreenerModel.FK_Stocks_Exchanges", "Stock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockScreenerModel", Name="Stock")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Stock : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Stock object.
        /// </summary>
        /// <param name="exchange">Initial value of the Exchange property.</param>
        /// <param name="ticker">Initial value of the Ticker property.</param>
        /// <param name="companyName">Initial value of the CompanyName property.</param>
        public static Stock CreateStock(global::System.String exchange, global::System.String ticker, global::System.String companyName)
        {
            Stock stock = new Stock();
            stock.Exchange = exchange;
            stock.Ticker = ticker;
            stock.CompanyName = companyName;
            return stock;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Exchange
        {
            get
            {
                return _Exchange;
            }
            set
            {
                if (_Exchange != value)
                {
                    OnExchangeChanging(value);
                    ReportPropertyChanging("Exchange");
                    _Exchange = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Exchange");
                    OnExchangeChanged();
                }
            }
        }
        private global::System.String _Exchange;
        partial void OnExchangeChanging(global::System.String value);
        partial void OnExchangeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Ticker
        {
            get
            {
                return _Ticker;
            }
            set
            {
                if (_Ticker != value)
                {
                    OnTickerChanging(value);
                    ReportPropertyChanging("Ticker");
                    _Ticker = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Ticker");
                    OnTickerChanged();
                }
            }
        }
        private global::System.String _Ticker;
        partial void OnTickerChanging(global::System.String value);
        partial void OnTickerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CompanyName
        {
            get
            {
                return _CompanyName;
            }
            set
            {
                OnCompanyNameChanging(value);
                ReportPropertyChanging("CompanyName");
                _CompanyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CompanyName");
                OnCompanyNameChanged();
            }
        }
        private global::System.String _CompanyName;
        partial void OnCompanyNameChanging(global::System.String value);
        partial void OnCompanyNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockScreenerModel", "FK_Stocks_Exchanges", "Exchanx")]
        public Exchanx Exchanx
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Exchanx>("StockScreenerModel.FK_Stocks_Exchanges", "Exchanx").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Exchanx>("StockScreenerModel.FK_Stocks_Exchanges", "Exchanx").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Exchanx> ExchanxReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Exchanx>("StockScreenerModel.FK_Stocks_Exchanges", "Exchanx");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Exchanx>("StockScreenerModel.FK_Stocks_Exchanges", "Exchanx", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockScreenerModel", "WatchListsToTickers", "Watchlist")]
        public EntityCollection<Watchlist> Watchlists
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Watchlist>("StockScreenerModel.WatchListsToTickers", "Watchlist");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Watchlist>("StockScreenerModel.WatchListsToTickers", "Watchlist", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockScreenerModel", "FK_StockDailies_Stocks", "StockDaily")]
        public EntityCollection<StockDaily> StockDailies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StockDaily>("StockScreenerModel.FK_StockDailies_Stocks", "StockDaily");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StockDaily>("StockScreenerModel.FK_StockDailies_Stocks", "StockDaily", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockScreenerModel", Name="StockDaily")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StockDaily : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StockDaily object.
        /// </summary>
        /// <param name="exchange">Initial value of the Exchange property.</param>
        /// <param name="ticker">Initial value of the Ticker property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="openPrice">Initial value of the OpenPrice property.</param>
        /// <param name="closePrice">Initial value of the ClosePrice property.</param>
        /// <param name="highPrice">Initial value of the HighPrice property.</param>
        /// <param name="lowPrice">Initial value of the LowPrice property.</param>
        /// <param name="volume">Initial value of the Volume property.</param>
        public static StockDaily CreateStockDaily(global::System.String exchange, global::System.String ticker, global::System.DateTime date, global::System.Double openPrice, global::System.Double closePrice, global::System.Double highPrice, global::System.Double lowPrice, global::System.Int32 volume)
        {
            StockDaily stockDaily = new StockDaily();
            stockDaily.Exchange = exchange;
            stockDaily.Ticker = ticker;
            stockDaily.Date = date;
            stockDaily.OpenPrice = openPrice;
            stockDaily.ClosePrice = closePrice;
            stockDaily.HighPrice = highPrice;
            stockDaily.LowPrice = lowPrice;
            stockDaily.Volume = volume;
            return stockDaily;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Exchange
        {
            get
            {
                return _Exchange;
            }
            set
            {
                if (_Exchange != value)
                {
                    OnExchangeChanging(value);
                    ReportPropertyChanging("Exchange");
                    _Exchange = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Exchange");
                    OnExchangeChanged();
                }
            }
        }
        private global::System.String _Exchange;
        partial void OnExchangeChanging(global::System.String value);
        partial void OnExchangeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Ticker
        {
            get
            {
                return _Ticker;
            }
            set
            {
                if (_Ticker != value)
                {
                    OnTickerChanging(value);
                    ReportPropertyChanging("Ticker");
                    _Ticker = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Ticker");
                    OnTickerChanged();
                }
            }
        }
        private global::System.String _Ticker;
        partial void OnTickerChanging(global::System.String value);
        partial void OnTickerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                if (_Date != value)
                {
                    OnDateChanging(value);
                    ReportPropertyChanging("Date");
                    _Date = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Date");
                    OnDateChanged();
                }
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double OpenPrice
        {
            get
            {
                return _OpenPrice;
            }
            set
            {
                OnOpenPriceChanging(value);
                ReportPropertyChanging("OpenPrice");
                _OpenPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OpenPrice");
                OnOpenPriceChanged();
            }
        }
        private global::System.Double _OpenPrice;
        partial void OnOpenPriceChanging(global::System.Double value);
        partial void OnOpenPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ClosePrice
        {
            get
            {
                return _ClosePrice;
            }
            set
            {
                OnClosePriceChanging(value);
                ReportPropertyChanging("ClosePrice");
                _ClosePrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClosePrice");
                OnClosePriceChanged();
            }
        }
        private global::System.Double _ClosePrice;
        partial void OnClosePriceChanging(global::System.Double value);
        partial void OnClosePriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double HighPrice
        {
            get
            {
                return _HighPrice;
            }
            set
            {
                OnHighPriceChanging(value);
                ReportPropertyChanging("HighPrice");
                _HighPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HighPrice");
                OnHighPriceChanged();
            }
        }
        private global::System.Double _HighPrice;
        partial void OnHighPriceChanging(global::System.Double value);
        partial void OnHighPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double LowPrice
        {
            get
            {
                return _LowPrice;
            }
            set
            {
                OnLowPriceChanging(value);
                ReportPropertyChanging("LowPrice");
                _LowPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LowPrice");
                OnLowPriceChanged();
            }
        }
        private global::System.Double _LowPrice;
        partial void OnLowPriceChanging(global::System.Double value);
        partial void OnLowPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Volume
        {
            get
            {
                return _Volume;
            }
            set
            {
                OnVolumeChanging(value);
                ReportPropertyChanging("Volume");
                _Volume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Volume");
                OnVolumeChanged();
            }
        }
        private global::System.Int32 _Volume;
        partial void OnVolumeChanging(global::System.Int32 value);
        partial void OnVolumeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockScreenerModel", "FK_StockDailies_Stocks", "Stock")]
        public Stock Stock
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("StockScreenerModel.FK_StockDailies_Stocks", "Stock").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("StockScreenerModel.FK_StockDailies_Stocks", "Stock").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Stock> StockReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("StockScreenerModel.FK_StockDailies_Stocks", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Stock>("StockScreenerModel.FK_StockDailies_Stocks", "Stock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockScreenerModel", Name="Watchlist")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Watchlist : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Watchlist object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Watchlist CreateWatchlist(global::System.Int32 id, global::System.String name)
        {
            Watchlist watchlist = new Watchlist();
            watchlist.ID = id;
            watchlist.Name = name;
            return watchlist;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockScreenerModel", "WatchListsToTickers", "Stock")]
        public EntityCollection<Stock> Stocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Stock>("StockScreenerModel.WatchListsToTickers", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Stock>("StockScreenerModel.WatchListsToTickers", "Stock", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
